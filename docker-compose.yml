version: '3.8'

services:
  db:
    image: postgres:15
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: logistic_crm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: django_backend
    command: python manage.py runserver 0.0.0.0:8000
    env_file:
      - ./.env
    volumes:
      - ./backend:/app
    ports:
      - "80:8000"
    environment:
      - DEBUG=0
      - SECRET_KEY=da2889f63f8140e0a6f342e86de21bec5bb75d2c71d402e9e75670736d63319d
      - DATABASE_URL=postgres://postgres:postgres@db:5432/logistic_crm
      - OPENROUTER_API_KEY=sk-or-v1-d9e2c55b33f2a77696ac62acc988e1
    depends_on:
      - db
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: react_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "443:3000"
    environment:
      - REACT_APP_API_URL=http://185.135.83.113/api
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:

# Не забудьте создать файл .env в корне проекта с переменными:
# DB_ROOT_PASSWORD=your_strong_root_password
# DB_NAME=your_db_name
# DB_USER=your_db_user
# DB_PASSWORD=your_db_password
# DJANGO_SECRET_KEY=your_django_secret_key
# DJANGO_DEBUG=True 